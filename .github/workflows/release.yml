name: Build and Package Electron App

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*' # 仅匹配符合语义化版本控制格式的标签

jobs:
  build:
    runs-on: ${{ matrix.os }} # 使用矩阵策略来确定操作系统
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # 设置 Node.js 版本
          cache: 'npm' # 启用 npm 缓存

      - name: Install dependencies
        run: npm install # 安装依赖

      - name: Build Electron app
        run: npm run dist # 执行打包命令
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          ACTIONS_STEP_DEBUG: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: electron-build
          path: |
            dist/**/*.deb
            dist/**/*.rpm
            dist/**/*.AppImage
            dist/**/*.exe
            dist/**/*.dmg
            dist/**/*.zip
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          ACTIONS_STEP_DEBUG: true

      - name: List files in dist directory
        run: ls -R dist/

  release:
    needs: build # 依赖于 build 任务
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: electron-build
          path: release/

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: '1.0.0'
          body: 'Release of version 1.0.0'
          draft: false
          prerelease: false
          files: |
            release/**/*.deb
            release/**/*.rpm
            release/**/*.AppImage
            release/**/*.exe
            release/**/*.dmg
            release/**/*.zip
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          ACTIONS_STEP_DEBUG: true
